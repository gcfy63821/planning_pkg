/*

#include <ros/ros.h>
#include <visualization_msgs/MarkerArray.h>
#include <geometry_msgs/PointStamped.h>
#include <tf2_ros/transform_listener.h>
#include <tf2_ros/transform_broadcaster.h>
#include <boost/bind.hpp>
#include <tf2_ros/buffer.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>

void createAndPublishTransform(tf2_ros::TransformBroadcaster& br, const std::string& parent_frame, const std::string& child_frame, const geometry_msgs::Pose& pose)
{
    geometry_msgs::TransformStamped transform;
    transform.header.stamp = ros::Time::now();
    transform.header.frame_id = parent_frame;
    transform.child_frame_id = child_frame;

    // Convert geometry_msgs::Point to geometry_msgs::Vector3
    transform.transform.translation.x = pose.position.x;
    transform.transform.translation.y = pose.position.y;
    transform.transform.translation.z = pose.position.z;

    transform.transform.rotation = pose.orientation;

    br.sendTransform(transform);
}

void bodyTrackingCallback(const visualization_msgs::MarkerArray::ConstPtr& msg, tf2_ros::Buffer& tfBuffer)
{
    tf2_ros::TransformBroadcaster br;

    for (const auto& marker : msg->markers)
    {
        int id = marker.id;

        if (id >= 100 && id <= 103)
        {
            std::string parent_frame = "joint_" + std::to_string(id - 1);
            std::string child_frame = "joint_" + std::to_string(id);

            geometry_msgs::Pose pose = marker.pose;

            createAndPublishTransform(br, parent_frame, child_frame, pose);

            geometry_msgs::PointStamped point;
            point.header.stamp = ros::Time(0);
            point.header.frame_id = child_frame;

            try
            {
                // Use tf2 to transform the point to the parent frame
                geometry_msgs::PointStamped transformedPoint;
                tfBuffer.transform(point, transformedPoint, parent_frame);

                ROS_INFO("关节 %d 在 %s 中的变换坐标: %.3f, %.3f, %.3f", id, parent_frame.c_str(),
                         transformedPoint.point.x, transformedPoint.point.y, transformedPoint.point.z);
            }
            catch (tf2::TransformException& ex)
            {
                ROS_WARN("无法变换关节 %d: %s", id, ex.what());
            }
        }
    }
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "test_getdata");
    ros::NodeHandle nh;

    tf2_ros::Buffer tfBuffer;
    tf2_ros::TransformListener tfListener(tfBuffer);

    // 显式声明回调函数的类型
    ros::Subscriber sub = nh.subscribe<visualization_msgs::MarkerArray>("/k4a/body_tracking_data", 1, boost::bind(bodyTrackingCallback, _1, boost::ref(tfBuffer)));

    ros::spin();

    return 0;
}


*/


// #include <ros/ros.h>
// #include <visualization_msgs/MarkerArray.h>
// #include <geometry_msgs/PointStamped.h>
// #include <tf2_ros/transform_listener.h>
// #include <tf2_geometry_msgs/tf2_geometry_msgs.h>
// #include <tf2/LinearMath/Quaternion.h>
// #include <functional>

// void bodyTrackingCallback(const visualization_msgs::MarkerArray::ConstPtr& msg, tf2_ros::Buffer& tfBuffer)
// {
//     geometry_msgs::PointStamped point203;  // ID 203 的点
//     point203.header.stamp = ros::Time(0);  // 使用最新的可用变换
//     point203.header.frame_id = "joint_203";  // 根据关节 ID 命名的帧

//     try
//     {
//         // 使用 tf2 将点变换到父帧 (joint_202)
//         geometry_msgs::PointStamped transformedPoint202;
//         tfBuffer.transform(point203, transformedPoint202, "joint_202");

//         // 打印变换后的点坐标
//         ROS_INFO("关节 203 在 joint_202 中的变换坐标: %.3f, %.3f, %.3f",
//                  transformedPoint202.point.x, transformedPoint202.point.y, transformedPoint202.point.z);

//         // 使用 tf2 将点变换到父帧 (joint_201)
//         geometry_msgs::PointStamped transformedPoint201;
//         tfBuffer.transform(transformedPoint202, transformedPoint201, "joint_201");

//         // 打印变换后的点坐标
//         ROS_INFO("关节 203 在 joint_201 中的变换坐标: %.3f, %.3f, %.3f",
//                  transformedPoint201.point.x, transformedPoint201.point.y, transformedPoint201.point.z);

//         // 使用 tf2 将点变换到父帧 (joint_200)
//         geometry_msgs::PointStamped transformedPoint200;
//         tfBuffer.transform(transformedPoint201, transformedPoint200, "joint_200");

//         // 打印变换后的点坐标
//         ROS_INFO("关节 203 在 joint_200 中的变换坐标: %.3f, %.3f, %.3f",
//                  transformedPoint200.point.x, transformedPoint200.point.y, transformedPoint200.point.z);

//         // 输出 ID 203 相对于 ID 200 的坐标
//         ROS_INFO("ID 203 相对于 ID 200 的坐标: %.3f, %.3f, %.3f",
//                  transformedPoint200.point.x, transformedPoint200.point.y, transformedPoint200.point.z);
//     }
//     catch (tf2::TransformException& ex)
//     {
//         ROS_WARN("无法变换关节 203: %s", ex.what());
//     }
// }


// int main(int argc, char** argv)
// {
//     ros::init(argc, argv, "body_tracking_listener");
//     ros::NodeHandle nh;

//     tf2_ros::Buffer tfBuffer;
//     tf2_ros::TransformListener tfListener(tfBuffer);

//     ros::Subscriber sub = nh.subscribe<visualization_msgs::MarkerArray>("/k4a/body_tracking_data", 1,
//                                                                       std::bind(bodyTrackingCallback, std::placeholders::_1, std::ref(tfBuffer)));

//     ros::spin();

//     return 0;
// }



/*
#include <ros/ros.h>
#include <geometry_msgs/PointStamped.h>
#include <tf2_ros/buffer.h>
#include <tf2_ros/transform_listener.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <visualization_msgs/MarkerArray.h>




// Callback function to process body tracking data
void bodyTrackingCallback(const visualization_msgs::MarkerArray::ConstPtr& msg, tf2_ros::Buffer& tfBuffer)
{
    geometry_msgs::PointStamped point203;  // PointStamped for id 203
    point203.header.stamp = ros::Time(0);  // Use latest available transform
    point203.header.frame_id = "base_frame";  // Replace with the appropriate frame

    for (const auto& marker : msg->markers)
    {
        // Check if the marker id is within the range of interest (200 to 203)
        if (marker.id >= 200 && marker.id <= 203)
        {
            geometry_msgs::PointStamped point;
            point.header.stamp = ros::Time(0);  // Use latest available transform
            point.header.frame_id = "base_frame";  // Replace with the appropriate frame

            // Set the point's coordinates based on the marker pose
            point.point.x = marker.pose.position.x;
            point.point.y = marker.pose.position.y;
            point.point.z = marker.pose.position.z;

            try
            {
                // Use tf2 to transform the point to the "base_frame"
                geometry_msgs::PointStamped transformedPoint;
                tfBuffer.transform(point, transformedPoint, "base_frame");

                // Check if the marker id is 203 (Neck), and save the transformed coordinates
                if (marker.id == 203)
                {
                    point203.point = transformedPoint.point;
                }

                // Print the transformed point coordinates
                ROS_INFO("Marker %d transformed coordinates in base_frame: %.3f, %.3f, %.3f",
                         marker.id, transformedPoint.point.x, transformedPoint.point.y, transformedPoint.point.z);
            }
            catch (tf2::TransformException& ex)
            {
                ROS_WARN("Failed to transform marker %d: %s", marker.id, ex.what());
            }
        }
    }

    // Output the coordinates of id 203 relative to id 200
    ROS_INFO("Coordinates of id 203 relative to id 200: %.3f, %.3f, %.3f",
             point203.point.x, point203.point.y, point203.point.z);
}



int main(int argc, char** argv)
{
    // Initialize ROS
    ros::init(argc, argv, "test_getdata_node");

    // Create a ROS node handle
    ros::NodeHandle nh;

    // Set up a tf2 buffer
    tf2_ros::Buffer tfBuffer;

    // Subscribe to the body tracking data
    ros::Subscriber sub = nh.subscribe<visualization_msgs::MarkerArray>(
        "/k4a/body_tracking_data", 1, boost::bind(bodyTrackingCallback, _1, boost::ref(tfBuffer)));

    // Spin
    ros::spin();

    return 0;
}
*/